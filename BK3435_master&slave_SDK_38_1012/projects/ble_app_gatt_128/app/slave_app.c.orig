#include "rwip_config.h"             // SW configuration
#if (BLE_APP_PRESENT)
#include <string.h>
#include "rwapp_config.h"
#include "appm_task.h"                // Application task Definition
#include "appm.h"                     // Application Definition
#include "gap.h"                     // GAP Definition
#include "gapm_task.h"               // GAP Manager Task API
#include "gapc_task.h"               // GAP Controller Task API
#include "co_bt.h"                   // Common BT Definition
#include "co_math.h"                 // Common Maths Definition
#include "ke_timer.h"
#include "app_fcc0.h"                 // Application security Definition
#include "app_dis.h"                 // Device Information Service Application Definitions
#include "app_batt.h"                // Battery Application Definitions
#include "app_oads.h"                 // Application oads Definition
#include "nvds.h"                    // NVDS Definitions
#include "rf.h"
#include "uart.h"
#include "adc.h"
#include "gpio.h"
#include "wdt.h"


extern uint8_t ble_dev_name[];
extern uint8_t scan_rsp_data[];

void appm_start_advertising(void)
{	
    //处于就绪状态
    if (ke_state_get(TASK_APPM) == APPM_IDLE)
    {				
        // Prepare the GAPM_START_ADVERTISE_CMD message
        struct gapm_start_advertise_cmd *cmd = KE_MSG_ALLOC(GAPM_START_ADVERTISE_CMD,
                                                            TASK_GAPM, TASK_APPM,
                                                            gapm_start_advertise_cmd);

        cmd->op.addr_src    = GAPM_STATIC_ADDR;
        cmd->channel_map    = APP_ADV_CHMAP;
        cmd->intv_min 		= APP_ADV_INT_MIN;
        cmd->intv_max 		= APP_ADV_INT_MAX;	
        cmd->op.code        = GAPM_ADV_UNDIRECT;
		
        cmd->info.host.mode = GAP_GEN_DISCOVERABLE;

 		/*-----------------------------------------------------------------------------------
         * Set the Advertising Data and the Scan Response Data
         *---------------------------------------------------------------------------------*/
        // Flag value is set by the GAP
        cmd->info.host.adv_data_len       = ADV_DATA_LEN;
        cmd->info.host.scan_rsp_data_len  = SCAN_RSP_DATA_LEN;

        // Advertising Data
        if(nvds_get(NVDS_TAG_APP_BLE_ADV_DATA, &cmd->info.host.adv_data_len,
                    &cmd->info.host.adv_data[0]) != NVDS_OK)
        {
            cmd->info.host.adv_data_len = 0;
/*
            cmd->info.host.adv_data[0] = 2;// Length of ad type flags
            cmd->info.host.adv_data[1] = GAP_AD_TYPE_FLAGS;
            cmd->info.host.adv_data[2] = GAP_BR_EDR_NOT_SUPPORTED;
            // set mode in ad_type
            switch(cmd->info.host.mode)
            {
                // General discoverable mode
                case GAP_GEN_DISCOVERABLE:
                {
                    cmd->info.host.adv_data[2] |= GAP_LE_GEN_DISCOVERABLE_FLG;
                }
                break;
                // Limited discoverable mode
                case GAP_LIM_DISCOVERABLE:
                {
                    cmd->info.host.adv_data[2] |= GAP_LE_LIM_DISCOVERABLE_FLG;
                }
                break;
                default: break; // do nothing
            }
            */
            cmd->info.host.adv_data_len=0;///3;
            //Add list of UUID and appearance						
            memcpy(&cmd->info.host.adv_data[cmd->info.host.adv_data_len],
                   APP_FFC0_ADV_DATA_UUID, APP_FFC0_ADV_DATA_UUID_LEN);
            cmd->info.host.adv_data_len += APP_FFC0_ADV_DATA_UUID_LEN;
        }

		//  Device Name Length
        uint8_t device_name_length;
        uint8_t device_name_avail_space;
        uint8_t device_name_temp_buf[APP_DEVICE_NAME_MAX_LEN];
        
        memset(device_name_temp_buf, 0, APP_DEVICE_NAME_MAX_LEN);
        // Get remaining space in the Advertising Data - 2 bytes are used for name length/flag
        device_name_avail_space = ADV_DATA_LEN  - cmd->info.host.adv_data_len - 2;

        // Check if data can be added to the Advertising data
        if (device_name_avail_space > 2)
        {
						
            device_name_length = NVDS_LEN_DEVICE_NAME;
            if (nvds_get(NVDS_TAG_DEVICE_NAME, &device_name_length,
                         &device_name_temp_buf[0]) != NVDS_OK)
            {
                //device_name_length = strlen(APP_DFLT_DEVICE_NAME);
                device_name_length = strlen((const char*)ble_dev_name);
                // Get default Device Name (No name if not enough space)
                //memcpy(&device_name_temp_buf[0], APP_DFLT_DEVICE_NAME, device_name_length);
				memcpy(&device_name_temp_buf[0], ble_dev_name, device_name_length);
            }
            else
            {
                device_name_length = strlen((const char*)device_name_temp_buf);
                //memcpy(&device_name_temp_buf[0], ble_dev_name, device_name_length);
                UART_PRINTF("name len:%d %d %s\r\n",device_name_length, device_name_avail_space, device_name_temp_buf);
            }
							
	     	if(device_name_length > 0)
            {
                // Check available space
                device_name_length = co_min(device_name_length, device_name_avail_space);
                cmd->info.host.adv_data[cmd->info.host.adv_data_len]     = device_name_length + 1;
								 
                // Fill Device Name Flag
                cmd->info.host.adv_data[cmd->info.host.adv_data_len + 1] = '\x09';
                // Copy device name
                memcpy(&cmd->info.host.adv_data[cmd->info.host.adv_data_len + 2],
                device_name_temp_buf, device_name_length);

                // Update Advertising Data Length
                cmd->info.host.adv_data_len += (device_name_length + 2);					
            }
          
        }

        // Scan Response Data
        if(nvds_get(NVDS_TAG_APP_BLE_SCAN_RESP_DATA, &cmd->info.host.scan_rsp_data_len,
                    &cmd->info.host.scan_rsp_data[0]) != NVDS_OK)
        {
            cmd->info.host.scan_rsp_data_len = 0;
/*
						memcpy(&cmd->info.host.scan_rsp_data[cmd->info.host.scan_rsp_data_len],
                   APP_SCNRSP_DATA, APP_SCNRSP_DATA_LEN);*/
						memcpy(&cmd->info.host.scan_rsp_data[cmd->info.host.scan_rsp_data_len],
                   scan_rsp_data, strlen((const char*)scan_rsp_data));
            cmd->info.host.scan_rsp_data_len += strlen((const char*)scan_rsp_data);///APP_SCNRSP_DATA_LEN;
        }

        // Send the message
        ke_msg_send(cmd);
	 	UART_PRINTF("appm start advertising\r\n");
		wdt_enable(0x3fff);

        // Set the state of the task to APPM_ADVERTISING
        ke_state_set(TASK_APPM, APPM_ADVERTISING);	
    }else
    {
        UART_PRINTF("appm start advertising state error :0x%x\r\n",ke_state_get(TASK_APPM));
    }
	
    // else ignore the request
}

/* 设备主动停止广播函数*/
void appm_stop_advertising(void)
{
    UART_PRINTF("appm_stop_advertising\r\n");
    if (ke_state_get(TASK_APPM) == APPM_ADVERTISING)
    {
        // Go in ready state
        //ke_state_set(TASK_APPM, APPM_IDLE);

        // Prepare the GAPM_CANCEL_CMD message
        struct gapm_cancel_cmd *cmd = KE_MSG_ALLOC(GAPM_CANCEL_CMD,
                                                   TASK_GAPM, TASK_APPM,
                                                   gapm_cancel_cmd);
        cmd->operation = GAPM_CANCEL;

        // Send the message
        ke_msg_send(cmd);

        ke_state_set(TASK_APPM, APPM_WAIT_ADVERTISTING_END);
    }
    else
    {
        UART_PRINTF("appm_stop_advertising state error :0x%x\r\n",ke_state_get(TASK_APPM));
    }
    // else ignore the request
}

void appm_update_adv_data( uint8_t* adv_buff, uint8_t adv_len, uint8_t* scan_buff, uint8_t scan_len)
{
	if (ke_state_get(TASK_APPM) == APPM_ADVERTISING 
                 && (adv_len <= ADV_DATA_LEN) && (scan_len <= ADV_DATA_LEN))
	{
		struct gapm_update_advertise_data_cmd *cmd =  KE_MSG_ALLOC(
            		            GAPM_UPDATE_ADVERTISE_DATA_CMD,
            		            TASK_GAPM,
            		            TASK_APPM,
            		            gapm_update_advertise_data_cmd);

		cmd->operation = GAPM_UPDATE_ADVERTISE_DATA;
		cmd->adv_data_len = adv_len;
		cmd->scan_rsp_data_len = scan_len;

		//memcpy
		memcpy(&cmd->adv_data[0], adv_buff, adv_len);
		memcpy(&cmd->scan_rsp_data[0], scan_buff, scan_len);
        
		// Send the message
		ke_msg_send(cmd);
	}
}


#endif //


